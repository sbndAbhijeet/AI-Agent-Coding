def safe_chat_completion(messages, retries=5, delay=5):
    for attempt in range(retries):
        try:
            response = client.chat.completions.create(
                model='gemini-2.0-flash',
                response_format={'type': 'json_object'},
                messages=messages,
            )
            return response
        except Exception as e:
            # Check if it's 503 error
            if "503" in str(e) or "overloaded" in str(e).lower():
                print(f"Server overloaded. Retrying in {delay} seconds... (Attempt {attempt + 1}/{retries})")
                time.sleep(delay)
                delay *= 2  # exponential backoff
            else:
                raise e
    raise RuntimeError("Failed after multiple retries due to server overload.")


# What is today's weather in hyderabad?
print('I am an AI Assitant ü§ñ')
print('Ask me anything about weather ‚òÅÔ∏è')

while True:
  query = input("Enter your query: ")
  messages.append({'role': 'user', 'content': query})

  while True:
    
    response = safe_chat_completion(messages)

    messages.append({'role': 'assistant', 'content': response.choices[0].message.content})

    try:
      json_res = json.loads(response.choices[0].message.content)

    except json.JSONDecodeError as e:
      print("‚ö†Ô∏è Failed to parse JSON response:", e)
      print("Raw Response:", response)
      break


    if json_res.get('step') != 'output' and 'content' in json_res:
      print(f"      üß†: {json_res.get('content', '')}")
      continue

    elif json_res.get('step') == 'action':
      tool_name = json_res.get('function', '')
      tool_input = json_res.get('input', '')
      
      print(f"üõ†Ô∏è... Calling tool: {tool_name} with input {tool_input}")

      if available_tools.get(tool_name) != False:
        output = available_tools[tool_name](tool_input)
        content = json.dumps({'step': 'observe', 'output': output})
        messages.append({'role': 'user', 'content': content})
        continue
      
      print('Tool not found üòñ')
      break

    elif json_res.get('step') == 'observe':
      print(f"‚öôÔ∏è: {json_res.get('output', '')}")
      continue

    print(f"ü§ñ: {json_res.get('content','')}")
    # print(json_res)
    break


You are an helpfull AI Assistant who is specialized in resolving user query.
    You work on start, plan, action, observe mode.

    For the given user query and available tools, plan the step by step execution, based on the planning,
    select the relevant tool from the available tool. and based on the tool selection you perform an action to call the tool.

    Wait for the observation and based on the observation from the tool call resolve the user query.

    Rules:
    - Follow the Output JSON Format.
    - Always perform one step at a time and wait for next input
    - Carefully analyse the user query

    Output JSON Format:
    {{
        "step": "string",
        "content": "string",
        "function": "The name of function if the step is action",
        "input": "The input parameter for the function",
    }}

    Available Tools:
    - "get_weather": Takes a city name as an input and returns the current weather for the city
    - "run_command": Takes linux command as a string and executes the command and returns the output after executing it.

    Example:
    User Query: What is the weather of new york?
    Output: {{ "step": "plan", "content": "The user is interseted in weather data of new york" }}
    Output: {{ "step": "plan", "content": "From the available tools I should call get_weather" }}
    Output: {{ "step": "action", "function": "get_weather", "input": "new york" }}
    Output: {{ "step": "observe", "output": "12 Degree Cel" }}
    Output: {{ "step": "output", "content": "The weather for new york seems to be 12 degrees." }}


Remarks:
if weather app also create .env and ask user for api

ask feedback loop